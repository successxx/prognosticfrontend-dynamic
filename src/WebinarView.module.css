import React, { useEffect, useRef, useState, useCallback } from "react";
import { createPortal } from "react-dom";
import styles from "./WebinarView.module.css";
import VideoOverlay from "./VideoOverlay";
import VideoClockWidget from "./VideoClockWidget"; // fluid clock
import ExitOverlay from "./ExitOverlay";

interface IWebinarInjection {
  Business_description: string;
  Industry: string;
  Offer_topic: string;
  Products_services: string;
  audio_link: string;
  audio_link_two: string;
  company_name: string;
  email_1: string;
  email_2: string;
  user_name: string;
  lead_email: string;
  exit_message: string;
  headline: string;
  offer_description: string;
  offer_goal: string;
  offer_name: string;
  offer_price: string;
  offer_url: string;
  pain_points: string;
  primary_benefits: string;
  primary_goal: string;
  salesletter: string;
  target_audience: string;
  target_url: string;
  website_url: string;
  testimonials: string;
}

const WebinarView: React.FC = () => {
  const videoRef = useRef<HTMLVideoElement | null>(null);
  const videoWrapperRef = useRef<HTMLDivElement | null>(null);

  // Audio
  const audioRef = useRef<HTMLAudioElement | null>(null);

  // For sound overlay
  const [hasInteracted, setHasInteracted] = useState(false);

  // Exit-intent
  const [showExitOverlay, setShowExitOverlay] = useState(false);
  const [hasShownOverlay, setHasShownOverlay] = useState(false);
  const [exitMessage, setExitMessage] = useState("");

  // Headline
  const [showHeadline, setShowHeadline] = useState(false);

  // Clock widget
  const [showClockWidget, setShowClockWidget] = useState(false);
  const [clockDragInComplete, setClockDragInComplete] = useState(false);
  const [clockRemoved, setClockRemoved] = useState(false);

  // Injection data
  const [webinarInjectionData, setWebinarInjectionData] =
    useState<IWebinarInjection | null>(null);

  // 1) On mount: fetch user data if available
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const userEmail = params.get("user_email");

    if (userEmail) {
      fetch("https://prognostic-ai-backend-acab284a2f57.herokuapp.com/get_user_two", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ user_email: userEmail }),
      })
        .then((resp) => {
          if (!resp.ok) throw new Error("Error fetching user data");
          return resp.json();
        })
        .then((data) => {
          setWebinarInjectionData(data);
          if (audioRef.current && data.audio_link) {
            audioRef.current.src = data.audio_link;
          }
          if (data.exit_message) {
            setExitMessage(data.exit_message);
          }
        })
        .catch((err) => console.error("Error loading user data:", err));
    }
  }, []);

  // 2) Try playing the voice injection at ~0.5s in
  useEffect(() => {
    const vid = videoRef.current;
    if (!vid || !audioRef.current) return;

    function handleTimeUpdate() {
      if (vid.currentTime >= 0.5) {
        audioRef.current.play().catch((err) => {
          console.warn("Voice injection blocked or prevented:", err);
        });
        vid.removeEventListener("timeupdate", handleTimeUpdate);
      }
    }
    vid.addEventListener("timeupdate", handleTimeUpdate);

    return () => {
      vid.removeEventListener("timeupdate", handleTimeUpdate);
    };
  }, []);

  // 3) Freed scrubbing => we do nothing special

  // 4) Exit-intent overlay
  useEffect(() => {
    if (hasShownOverlay) return;

    function handleMouseMove(e: MouseEvent) {
      const threshold = window.innerHeight * 0.1;
      if (e.clientY < threshold) {
        setShowExitOverlay(true);
        setHasShownOverlay(true);
      }
    }
    window.addEventListener("mousemove", handleMouseMove);

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
    };
  }, [hasShownOverlay]);

  // 5) Clock widget @4s => show, then @8s => remove
  useEffect(() => {
    const vid = videoRef.current;
    if (!vid) return;

    function clockCheck() {
      const t = vid.currentTime;
      if (!showClockWidget && t >= 4) {
        setShowClockWidget(true);
      }
      if (!clockRemoved && t >= 8) {
        setClockRemoved(true);
      }
    }
    vid.addEventListener("timeupdate", clockCheck);
    return () => {
      vid.removeEventListener("timeupdate", clockCheck);
    };
  }, [showClockWidget, clockRemoved]);

  // Once removed => hide fully after 1s
  useEffect(() => {
    if (clockRemoved) {
      const timer = setTimeout(() => {
        setShowClockWidget(false);
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [clockRemoved]);

  // 6) Show headline between 45.04â€“55.04
  useEffect(() => {
    const vid = videoRef.current;
    if (!vid) return;

    function handleHeadlineCheck() {
      const t = vid.currentTime;
      if (t >= 45.04 && t < 55.04) {
        setShowHeadline(true);
      } else {
        setShowHeadline(false);
      }
    }
    vid.addEventListener("timeupdate", handleHeadlineCheck);
    return () => {
      vid.removeEventListener("timeupdate", handleHeadlineCheck);
    };
  }, []);

  return (
    <div className={styles.container}>
      {/* hidden audio injection */}
      <audio ref={audioRef} style={{ display: "none" }} />

      {/* exit-intent */}
      {showExitOverlay && (
        createPortal(
          <ExitOverlay
            message={exitMessage}
            onClose={() => setShowExitOverlay(false)}
          />,
          document.body
        )
      )}

      {/* The video container */}
      <div ref={videoWrapperRef} className={styles.videoWrapper}>
        {/* Overlays: e.g. headline, etc. */}
        <VideoOverlay
          videoRef={videoRef}
          containerRef={videoWrapperRef}
          webinarData={webinarInjectionData}
        />

        {/* The actual video */}
        <video
          ref={videoRef}
          className={styles.videoPlayer}
          controls
          muted={!hasInteracted}
          playsInline
        >
          <source
            src="https://progwebinar.blob.core.windows.net/video/clientsaidemovid.mp4"
            type="video/mp4"
          />
          Your browser does not support HTML5 video.
        </video>

        {/* Sound overlay => unmute */}
        {!hasInteracted && (
          <div
            className={styles.soundOverlay}
            onClick={() => {
              setHasInteracted(true);
              if (videoRef.current) {
                videoRef.current.muted = false;
                videoRef.current.play().catch((err) => {
                  console.warn("Play blocked by browser:", err);
                });
              }
            }}
          >
            <div className={styles.soundIcon}>ðŸ”Š</div>
            <div className={styles.soundText}>Click to enable sound</div>
          </div>
        )}

        {/* Clock widget */}
        {showClockWidget && (
          <div
            className={
              `${styles.clockWidget} ` +
              (clockRemoved
                ? styles.animateOut
                : clockDragInComplete
                ? styles.wobble
                : styles.animateIn)
            }
            onAnimationEnd={(e) => {
              if (e.animationName.includes("dragIn")) {
                setClockDragInComplete(true);
              }
            }}
          >
            <div className={styles.widgetHeader}>
              <div className={styles.windowControls}>
                <div className={`${styles.windowButton} ${styles.closeButton}`} />
                <div className={`${styles.windowButton} ${styles.minimizeButton}`} />
                <div className={`${styles.windowButton} ${styles.maximizeButton}`} />
              </div>
              <div className={styles.widgetTitle}>Clock Widget</div>
            </div>
            <VideoClockWidget />
          </div>
        )}

        {/* Headline text */}
        {showHeadline && webinarInjectionData?.headline && (
          <div className={styles.headlineText}>
            {webinarInjectionData.headline}
          </div>
        )}
      </div>

      {/* Example CTA button or footer content */}
      <div style={{ marginTop: "20px", textAlign: "center" }}>
        <button
          onClick={() => window.open("https://webinar.clients.ai", "_blank")}
          style={{
            backgroundColor: "#252525",
            color: "#fff",
            border: "none",
            padding: "16px 32px",
            fontSize: "1rem",
            fontWeight: 600,
            borderRadius: "6px",
            cursor: "pointer",
          }}
        >
          Join The Next AI Agent Training
        </button>
      </div>

      <footer className={styles.footer}>
        Â© {new Date().getFullYear()} Clients.ai
      </footer>
    </div>
  );
};

export default WebinarView;
